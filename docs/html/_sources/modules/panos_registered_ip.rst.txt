.. _panos_registered_ip_module:


panos_registered_ip -- Register IP addresses for use with dynamic address groups on PAN-OS devices.
===================================================================================================

.. contents::
   :local:
   :depth: 1


Synopsis
--------

Registers tags for IP addresses that can be used to build dynamic address groups.




Requirements
------------
The below requirements are needed on the host that executes this module.

- pan-python can be obtained from PyPI https://pypi.python.org/pypi/pan-python
- pandevice can be obtained from PyPI https://pypi.python.org/pypi/pandevice



Parameters
----------

  ips (required, type: list)
    List of IP addresses to register/unregister.


  tags (required, type: list)
    List of tags that the IP address will be registered to.


  provider (type: )
    A dict object containing connection details.


    ip_address (type: str)
      The IP address or hostname of the PAN-OS device being configured.


    username (type: str, default: admin)
      The username to use for authentication.  This is ignored if *api_key* is specified.


    password (type: str)
      The password to use for authentication.  This is ignored if *api_key* is specified.


    api_key (type: str)
      The API key to use instead of generating it using *username* / *password*.


    port (type: int, default: 443)
      The port number to connect to the PAN-OS device on.


    serial_number (type: str)
      The serial number of a firewall to use for targeted commands. If *ip_address* is not a Panorama PAN-OS device, then this param is ignored.



  ip_address (type: str)
    **Deprecated**

    Use *provider* to specify PAN-OS connectivity instead.

    ------------

    The IP address or hostname of the PAN-OS device being configured.


  username (type: str, default: admin)
    **Deprecated**

    Use *provider* to specify PAN-OS connectivity instead.

    ------------

    The username to use for authentication.  This is ignored if *api_key* is specified.


  password (type: str)
    **Deprecated**

    Use *provider* to specify PAN-OS connectivity instead.

    ------------

    The password to use for authentication.  This is ignored if *api_key* is specified.


  api_key (type: str)
    **Deprecated**

    Use *provider* to specify PAN-OS connectivity instead.

    ------------

    The API key to use instead of generating it using *username* / *password*.


  port (type: int, default: 443)
    **Deprecated**

    Use *provider* to specify PAN-OS connectivity instead.

    ------------

    The port number to connect to the PAN-OS device on.


  state (type: str, default: present)
    The state.


  vsys (type: str, default: vsys1)
    The vsys this object belongs to.





Notes
-----

.. note::
   - Check mode is supported.
   - Panorama is not supported.
   - PAN-OS connectivity should be specified using *provider* or the classic PAN-OS connectivity params (*ip_address*, *username*, *password*, *api_key*, and *port*).  If both are present, then the classic params are ignored.




Examples
--------

.. code-block:: yaml+jinja

    
    - name: Add 'First_Tag' tag to 1.1.1.1
      panos_registered_ip:
        provider: '{{ provider }}'
        ips: ['1.1.1.1']
        tags: ['First_Tag']
        state: 'present'

    - name: Add 'First_Tag' tag to 1.1.1.2
      panos_registered_ip:
        provider: '{{ provider }}'
        ips: ['1.1.1.2']
        tags: ['First_Tag']
        state: 'present'

    - name: Add 'Second_Tag' tag to 1.1.1.1
      panos_registered_ip:
        provider: '{{ provider }}'
        ips: ['1.1.1.1']
        tags: ['Second_Tag']
        state: 'present'

    - name: Remove 'Second_Tag' from 1.1.1.1
      panos_registered_ip:
        provider: '{{ provider }}'
        ips: ['1.1.1.1']
        tags: ['Second_Tag']
        state: 'absent'

    - name: Remove 'First_Tag' from 1.1.1.2 (will unregister entirely)
      panos_registered_ip:
        provider: '{{ provider }}'
        ips: ['1.1.1.2']
        tags: ['First_Tag']
        state: 'absent'



Return Values
-------------

results (always, dict, {'1.1.1.1': ['First_Tag', 'Second_Tag']})
  After performing action, returns tags for given IPs.  IP addresses as keys, tags as values.





Status
------




- This module is not guaranteed to have a backwards compatible interface. *[preview]*


- This module is maintained by community.



Authors
~~~~~~~

- Michael Richardson (@mrichardson03)

