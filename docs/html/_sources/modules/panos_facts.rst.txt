.. _panos_facts_module:


panos_facts -- Collects facts from PAN-OS devices
=================================================

.. contents::
   :local:
   :depth: 1


Synopsis
--------

Collects fact information from Palo Alto Networks firewalls and Panorama.




Requirements
------------
The below requirements are needed on the host that executes this module.

- pan-python



Parameters
----------

  host (type: str)
    **Removed**

    Use *provider* instead.


  gather_subset (type: list, default: ['!config'])
    Scopes what information is gathered from the device. Possible values for this argument include all, system, session, interfaces, ha, routing, vr, vsys and config. You can specify a list of values to include a larger subset. Values can also be used with an initial ! to specify that a specific subset should not be collected.  Panorama only supports the system, ha, and config subsets.


  provider (type: )
    A dict object containing connection details.


    ip_address (type: str)
      The IP address or hostname of the PAN-OS device being configured.


    username (type: str, default: admin)
      The username to use for authentication.  This is ignored if *api_key* is specified.


    password (type: str)
      The password to use for authentication.  This is ignored if *api_key* is specified.


    api_key (type: str)
      The API key to use instead of generating it using *username* / *password*.


    port (type: int, default: 443)
      The port number to connect to the PAN-OS device on.


    serial_number (type: str)
      The serial number of a firewall to use for targeted commands. If *ip_address* is not a Panorama PAN-OS device, then this param is ignored.



  ip_address (type: str)
    **Deprecated**

    Use *provider* to specify PAN-OS connectivity instead.

    ------------

    The IP address or hostname of the PAN-OS device being configured.


  username (type: str, default: admin)
    **Deprecated**

    Use *provider* to specify PAN-OS connectivity instead.

    ------------

    The username to use for authentication.  This is ignored if *api_key* is specified.


  password (type: str)
    **Deprecated**

    Use *provider* to specify PAN-OS connectivity instead.

    ------------

    The password to use for authentication.  This is ignored if *api_key* is specified.


  api_key (type: str)
    **Deprecated**

    Use *provider* to specify PAN-OS connectivity instead.

    ------------

    The API key to use instead of generating it using *username* / *password*.


  port (type: int, default: 443)
    **Deprecated**

    Use *provider* to specify PAN-OS connectivity instead.

    ------------

    The port number to connect to the PAN-OS device on.





Notes
-----

.. note::
   - Checkmode is not supported.
   - PAN-OS connectivity should be specified using *provider* or the classic PAN-OS connectivity params (*ip_address*, *username*, *password*, *api_key*, and *port*).  If both are present, then the classic params are ignored.




Examples
--------

.. code-block:: yaml+jinja

    
    # Gather facts
    - name: Get facts
      panos_facts:
        provider: '{{ provider }}'
        gather_subset: ['config']



Return Values
-------------

ansible_net_hostname (When C(system) is specified in C(gather_subset)., str, )
  Hostname of the local node.


ansible_net_serial (When C(system) is specified in C(gather_subset)., str, )
  Serial number of the local node.


ansible_net_model (When C(system) is specified in C(gather_subset)., str, )
  Device model of the local node.


ansible_net_version (When C(system) is specified in C(gather_subset)., str, )
  PanOS version of the local node.


ansible_net_uptime (When C(system) is specified in C(gather_subset)., str, 469 days, 19:30:16)
  Uptime of the local node.


ansible_net_full_commit_required (When C(system) is specified in C(gather_subset)., bool, )
  Specifies whether full commit is required to apply changes.


ansible_net_uncommitted_changes (When C(system) is specified in C(gather_subset)., bool, )
  Specifies if commit is required to apply changes.


ansible_net_multivsys (When C(system) is specified in C(gather_subset)., str, True)
  Specifies whether multivsys mode is enabled on local node.


ansible_net_session_usage (When C(session) is specified in C(gather_subset)., int, )
  Current number of active sessions on local node


ansible_net_session_max (When C(session) is specified in C(gather_subset)., int, )
  Maximum number of sessions on local node.


ansible_net_pps (When C(session) is specified in C(gather_subset)., int, )
  Current packets/s throughput.


ansible_net_kbps (When C(session) is specified in C(gather_subset)., int, )
  Current kb/s throughput.


ansible_net_ha_enabled (When C(ha) is specified in C(gather_subset)., bool, )
  Specifies whether HA is enabled or not.


ansible_net_ha_localmode (When C(ha) is specified in C(gather_subset)., str, Active-Passive)
  Specifies the HA mode on local node.


ansible_net_ha_localstate (When C(ha) is specified in C(gather_subset)., str, active)
  Specifies the HA state on local node.


ansible_net_config (When C(config) is specified in C(gather_subset)., str, )
  Device confiration in XML format.


ansible_net_interfaces (When C(interface) is specified in C(gather_subset)., complex, )
  Network interface information.


  name (, str, ae1.23)
    Interface name.


  comment (, str, )
    Interface description/comment.


  ip (, list, 192.0.2.1/24)
    List of interface IP addresses in CIDR format.


  ipv6 (, list, 2001:db8::0000:1/64)
    List of interface IPv6 addresses in CIDR format.


  tag (, int, 23)
    VLAN tag for the subinterface.



ansible_net_virtual_routers (When C(vr) is specified in C(gather_subset)., complex, )
  Virtual Router information.


  vr_name (, str, )
    Name of the virtual router.


  vr_routerid (, str, 192.0.2.1)
    BGP router ID.


  vr_asn (, int, 65001)
    BGP autonomous system number.


  vr_iflist (, list, ['ae2.12', 'ae2.14'])
    List interfaces in the VR.



ansible_net_virtual_systems (When C(vsys) is specified in C(gather_subset)., complex, )
  Virtual System information.


  vsys_description (, str, )
    VSYS description/name.


  vsys_id (, int, )
    VSYS ID.


  vsys_name (, int, vsys1)
    VSYS name.


  vsys_currentsessions (, int, )
    Number of active sessions on VSYS.


  vsys_vsys_maxsessions (, int, )
    Number of configured maximum sessions on VSYS. 0 for unlimited.


  vsys_vrlist (, list, )
    List of virtual routers attached to the VSYS.


  vsys_iflist (, list, )
    List of interfaces attached to the VSYS.


  vsys_zonelist (, list, )
    List of security zones attached to the VSYS.



ansible_net_routing_table (When C(routing) is specified in C(gather_subset)., complex, )
  Routing Table information.


  age (, str, )
    Age of the route entry in the routing table.


  destination (, str, )
    IP prefix of the destination.


  flags (, str, )
    Flags for the route entry in the routing table.


  interface (, str, )
    Egress interface the router will use to reach the next hop.


  metric (, str, )
    Metric for the route.


  nexthop (, str, )
    Address of the device at the next hop toward the destination network.


  route_table (, str, )
    Unicast or multicast route table.


  virtual_router (, str, )
    Virtual router the route belongs to.






Status
------




- This module is not guaranteed to have a backwards compatible interface. *[preview]*


- This module is maintained by community.



Authors
~~~~~~~

- Tomi Raittinen (@traittinen)
- Garfield Lee Freeman (@shinmog)
- Michael Richardson (@mrichardson03)

