---
- import_tasks: 'reset.yml'

- name: Create child address object 'Test-One'
  panos_address_object:
    provider: '{{ device }}'
    name: 'Test-One'
    value: '1.1.1.1'
    description: 'Description One'

- name: Create child address object 'Test-Two'
  panos_address_object:
    provider: '{{ device }}'
    name: 'Test-Two'
    value: '2.2.2.2'
    description: 'Description Two'

- name: Create
  panos_address_group:
    provider: '{{ device }}'
    name: 'Test'
    static_value: ['Test-One', 'Test-Two']
  register: result

- name: Assert create was successful
  assert:
    that:
      - result is success
      - result is changed

- name: Create (idempotence)
  panos_address_group:
    provider: '{{ device }}'
    name: 'Test'
    static_value: ['Test-One', 'Test-Two']
  register: result

- name: Assert create (idempotence) was successful
  assert:
    that:
      - result is success
      - result is not changed

- name: Modify
  panos_address_group:
    provider: '{{ device }}'
    name: 'Test'
    static_value: ['Test-One']
  register: result

- name: Assert modify was successful
  assert:
    that:
      - result is success
      - result is changed

- name: Delete
  panos_address_group:
    provider: '{{ device }}'
    name: 'Test'
    state: 'absent'
  register: result

- name: Assert delete was successful
  assert:
    that:
      - result is success
      - result is changed

- name: Have to provide one of 'static_value' or 'dynamic_value'
  panos_address_group:
    provider: '{{ device }}'
    name: 'Test'
  register: result
  failed_when: result.msg is not match("One of 'static_value' or 'dynamic_value' is required")

- name: Can't provide both 'static_value' and 'dynamic_value'
  panos_address_group:
    provider: '{{ device }}'
    name: 'Test'
    static_value: ['Test-One']
    dynamic_value: "'Dynamic_Value'"
  register: result
  failed_when: result.msg is not search("static_value|dynamic_value")

- name: Make sure changes commit cleanly
  panos_commit:
    provider: '{{ device }}'
  register: result

- name: Assert commit was successful
  assert:
    that:
      - result is success

- import_tasks: 'reset.yml'
  when: reset_after_test|bool