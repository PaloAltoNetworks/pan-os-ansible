name: Ansible EE Image

on:
  workflow_dispatch:
  # push:
  #   branches:
  #     - develop
  #   tags:
  #     - 'v*'
  release:
    types: [published]          # TODO need to replace with push tag 'v*' as docker image metadata semver relies on this
    # TODO do similar to upgrade assurance, check CI workflow and if release is success..

env:
  NAMESPACE: paloaltonetworks
  COLLECTION_NAME: panos
  PYTHON_VERSION: 3.9           # TODO do we need this, as we take it from pyproject.yml ?


jobs:
  build:
    name: Build and Publish Ansible EE
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    defaults:
      run:
        working-directory: ansible_collections/${{ env.NAMESPACE }}/${{ env.COLLECTION_NAME }}

    steps:
      - name: check out code
        uses: actions/checkout@v4
        with:
          path: ./ansible_collections/${{ env.NAMESPACE }}/${{ env.COLLECTION_NAME }}

      - name: discover Python version
        id: pyversion
        shell: bash
        run: |
          PYVER=$(grep '^[Pp]ython ' pyproject.toml | sed -E 's/python += +\"\^?([0-9]\.[0-9]+)(\.[0-9]+)?\"/\1/; /python/q1')
          echo "pyversion=$PYVER" >> $GITHUB_OUTPUT
        # uses: PaloAltoNetworks/pan-os-upgrade-assurance/.github/actions/discover_python_version@v0.3.1
        # working-directory doesn't work with uses, until you get a `with path` similar to checkout this is going to be inline

      - name: install Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ steps.pyversion.outputs.pyversion }}
          cache: pip

      - name: install Poetry
        uses: Gr1N/setup-poetry@v8

      - name: prep Poetry venv
        run: |
          poetry env use ${{ steps.pyversion.outputs.pyversion }}
          poetry lock
          poetry install --with ansible-ee --without dev --no-root
        # working-directory: ansible_collections/${{ env.NAMESPACE }}/${{ env.COLLECTION_NAME }}

      - name: set up Docker Buildx
        uses: docker/setup-buildx-action@v3

        # TODO might need to use the ref or edge type as well for develop branch tagging..
        # TODO latest should only be tagged for release versions
      - name: determine docker tags and labels
        id: meta
        uses: docker/metadata-action@v5
        with:
          context: workflow # git - this ensures to reference the current git context instead of workflow context (context info ref/sha)
          images: ghcr.io/alperenkose/pan-os-ansible # TODO ghcr.io/paloaltonetworks/pan-os-ansible
          tags: |
            type=semver,pattern=v{{version}}
            type=semver,pattern=v{{major}}.{{minor}}
            type=semver,pattern=v{{major}}

        # TODO we should take pan-os-ansible from galaxy for a release BUT what about develop branch??
        # https://github.com/ansible-collections/community.dns/blob/main/.github/workflows/ee.yml#L96-L98
        # TRY OUT dynamically creating EE. Or we can make dynamic for develop and use static file for release?
      - name: Build collection
        run: |
          ansible-galaxy collection build --output-path ../../../
        # working-directory: ansible_collections/${{ env.NAMESPACE }}/${{ env.COLLECTION_NAME }}

      - name: Create files for building execution environment
        run: |
          COLLECTION_FILENAME="$(ls "${{ env.NAMESPACE }}-${{ env.COLLECTION_NAME }}"-*.tar.gz)"

          # EE config
          cat > execution-environment.yml <<EOF
          ---
          version: 3

          images:
            base_image:
              name: quay.io/centos/centos:stream9

          dependencies:
            python_interpreter:
              package_system: python3.9
              python_path: /usr/bin/python3.9
            ansible_core:
              package_pip: ansible-core>=2.15.0rc2,<2.16
            ansible_runner:
              package_pip: ansible-runner
            system: |
              git-core [platform:rpm]
              python3.9-devel [platform:rpm compile]
              libcurl-devel [platform:rpm compile]
              sshpass [platform:rpm]
              rsync [platform:rpm]
              epel-release [platform:rpm]
              unzip [platform:rpm]
            galaxy: requirements.yml
            python: requirements.txt

          additional_build_files:
            - src: ${COLLECTION_FILENAME}
              dest: src
            - src: requirements.txt
              dest: src

          additional_build_steps:
            append_base:
              - RUN $PYCMD -m pip install -U pip
            append_final:
              # SymLink `python` -> `python3.9`
              - RUN alternatives --install /usr/bin/python python /usr/bin/python3.9 39
          EOF
          echo "::group::execution-environment.yml"
          cat execution-environment.yml
          echo "::endgroup::"

          # Collection Requirements
          cat > requirements.yml <<EOF
          ---
          collections:
            - name: src/${COLLECTION_FILENAME}
              type: file
            - name: awx.awx
            - community.general
          EOF
          echo "::group::requirements.yml"
          cat requirements.yml
          echo "::endgroup::"

          # Python Requirements
          cat > requirements.txt <<EOF
          ---
          -r src/requirements.txt
          jmespath
          EOF
          echo "::group::requirements.txt"
          cat requirements.txt
          echo "::endgroup::"
        working-directory: .

      - name: create execution env context
        run: |
          poetry run -C ansible_collections/${{ env.NAMESPACE }}/${{ env.COLLECTION_NAME }} ansible-builder create -v 3 --output-filename Dockerfile
          # poetry run ansible-builder create -f meta/execution-environment.yml -v 3 --output-filename Dockerfile
          ls -l ./context/
        working-directory: .

      - name: login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: build and publish
        uses: docker/build-push-action@v5
        with:
          context: "../../../context/"
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
