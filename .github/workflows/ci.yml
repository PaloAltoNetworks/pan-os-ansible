name: CI

on:
  push:
    branches:
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./ansible_collections/paloaltonetworks/panos

    steps:
      - uses: actions/checkout@v2
        with:
          path: ./ansible_collections/paloaltonetworks/panos

      - name: Set up Python 3.6.8
        uses: actions/setup-python@v2.2.2
        with:
          python-version: 3.6.8

      - name: Install pipenv
        run: |
          pip install pipenv

      # - name: Check pipenv cache
      #   id: cache-pipenv
      #   uses: actions/cache@v2
      #   with:
      #     path: ~/.local/share/virtualenvs
      #     key: ${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}
      #     restore-keys: |
      #       ${{ runner.os }}-pipenv-

      - name: Install dependencies
        # if: steps.cache-pipenv.outputs.cache-hit != 'true'
        run: |
          pipenv install --dev

      - name: Check format
        run: |
          pipenv run make check-format

      - name: ansible-test sanity
        run: |
          pipenv run ansible-test sanity --python 3.6

      - name: ansible-galaxy collection build
        run: |
          pipenv run make build

  release:
    name: release
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [test]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Galaxy auth
        run: |
          mkdir -p ~/.ansible
          echo "token: $GALAXY_API_KEY" > ~/.ansible/galaxy_token
        env:
          GALAXY_API_KEY: ${{ secrets.GALAXY_API_KEY }}
        shell: bash

      - name: Create release and publish
        id: release
        uses: cycjimmy/semantic-release-action@v2
        with:
          semantic_version: 17.1.1
          extra_plugins: |
            conventional-changelog-conventionalcommits@^4.4.0
            @semantic-release/git@^9.0.0
            @semantic-release/exec@^5.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Store built collection
        uses: actions/upload-artifact@v2
        with:
          name: collection
          path: |
            *.tar.gz

  docs:
    name: docs
    #if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    #needs: [test]
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./ansible_collections/paloaltonetworks/panos

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          path: ./ansible_collections/paloaltonetworks/panos

      - name: Check cwd
        run: |
          echo $(pwd)

      - name: Set up Python 3.6.8
        uses: actions/setup-python@v2.2.2
        with:
          python-version: 3.6.8

      - name: Install pipenv
        run: |
          pip install pipenv

      # - name: Check pipenv cache
      #   id: cache-pipenv
      #   uses: actions/cache@v2
      #   with:
      #     path: ~/.local/share/virtualenvs
      #     key: ${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}
      #     restore-keys: |
      #       ${{ runner.os }}-pipenv-

      - name: Install dependencies
        # if: steps.cache-pipenv.outputs.cache-hit != 'true'
        run: |
          pipenv install --dev

      - name: Build the collection
        run:
          ansible-galaxy collection build

      # - name: Download built collection
      #   uses: actions/download-artifact@v2
      #   with:
      #     name: collection

      - name: Install built collection
        run:
          ansible-galaxy collection install *.tar.gz

      - name: Check cwd
        run: |
          echo $(pwd)

      - name: Generate documentation
        run: |
          pipenv run make docs

      - name: Check cwd
        run: |
          echo $(pwd)

      - name: Find html dir
        run: |
          find ~ -name html

      - name: Check Ansible version
        run: |
          ansible --version

      - name: Output env
        run: |
          echo $ANSIBLE_COLLECTIONS_PATHS
          echo $GITHUB_WORKSPACE

      #- name: Move docs into place
      #  run: |
      #    mv docs ../../..

      #- name: Find html dir
      #  run: |
      #    find ~ -name html

      - name: Deploy to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@4.1.5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: gh-pages
          folder: docs/html
          clean: true
          #GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          #BRANCH: gh-pages # The branch the action should deploy to.
          #FOLDER: docs/html # The folder the action should deploy.
          #CLEAN: true # Automatically remove deleted files from the deploy branch

  docs2:
    name: docs2
    #if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    #needs: [test]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Python 3.6.8
        uses: actions/setup-python@v2.2.2
        with:
          python-version: 3.6.8

      - name: Save installed path for later
        run: |
          echo "ac_path=$(pwd)" >> $GITHUB_ENV

      - name: Output env
        run: |
          echo ${{ env.ac_path }}
          echo $ANSIBLE_COLLECTIONS_PATHS
          echo $GITHUB_WORKSPACE
        env:
          ANSIBLE_COLLECTIONS_PATHS: ${{ env.ac_path }}

      - name: Setup env for ansible collection
        run: |
          ls -lF
          pwd
          echo 'doing mkdir'
          mkdir -p ~/ansible_collections/paloaltonetworks
          cd ~/ansible_collections/paloaltonetworks
          ln -s ${{ env.ac_path }} panos
          ls -lF
          cd panos
          ls -lF

      - name: Check cwd after env setup
        run: |
          pwd

      - name: Install pipenv
        run: |
          pip install pipenv

      - name: Install dependencies
        run: |
          cd ~/ansible_collections/paloaltonetworks/panos
          pipenv install --dev
        env:
          ANSIBLE_COLLECTIONS_PATHS: ${{ env.ac_path }}

      - name: Get pyversion
        run: |
          python3 -c 'import sys; print("pyver={0}".format(".".join(map(str, sys.version_info[:2]))))' >> $GITHUB_ENV

      - name: Try to run sanity tests
        run: |
          cd ~/ansible_collections/paloaltonetworks/panos
          pipenv run black --check .
          pipenv run isort --diff .
          #pipenv run isort --check .
          pipenv run ansible-test sanity --python ${{ env.pyver }} --skip-test import
        env:
          ANSIBLE_COLLECTIONS_PATHS: ${{ env.ac_path }}

      - name: Generate documentation
        run: |
          pwd
          cd ~/ansible_collections/paloaltonetworks/panos
          pwd
          pipenv run make docs
        env:
          ANSIBLE_COLLECTIONS_PATHS: ${{ env.ac_path }}

      - name: Find html dir
        run: |
          find ~ -name html

      - name: Check Ansible version
        run: |
          ansible --version

      - name: Deploy to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@4.1.5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: gh-pages
          folder: docs/html
          clean: true
          #GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          #BRANCH: gh-pages # The branch the action should deploy to.
          #FOLDER: docs/html # The folder the action should deploy.
          #CLEAN: true # Automatically remove deleted files from the deploy branch

  docs3:
    name: docs3
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./ansible_collections/paloaltonetworks/panos

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          path: ./ansible_collections/paloaltonetworks/panos

      - name: Check cwd
        run: |
          echo $(pwd)

      - name: Set up Python 3.6.8
        uses: actions/setup-python@v2.2.2
        with:
          python-version: 3.6.8

      - name: Install pipenv
        run: |
          pip install pipenv

      # - name: Check pipenv cache
      #   id: cache-pipenv
      #   uses: actions/cache@v2
      #   with:
      #     path: ~/.local/share/virtualenvs
      #     key: ${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}
      #     restore-keys: |
      #       ${{ runner.os }}-pipenv-

      - name: Install dependencies
        # if: steps.cache-pipenv.outputs.cache-hit != 'true'
        run: |
          pipenv install --dev

      - name: Build the collection
        run:
          ansible-galaxy collection build

      # - name: Download built collection
      #   uses: actions/download-artifact@v2
      #   with:
      #     name: collection

      - name: Install built collection
        run:
          ansible-galaxy collection install *.tar.gz

      - name: Check cwd
        run: |
          echo $(pwd)

      - name: Generate documentation
        run: |
          pipenv run make docs

      - name: Check cwd
        run: |
          echo $(pwd)

      - name: Find html dir
        run: |
          find ~ -name html

      - name: Check Ansible version
        run: |
          ansible --version

      - name: Output env
        run: |
          echo $ANSIBLE_COLLECTIONS_PATHS
          echo $GITHUB_WORKSPACE

      #- name: Move docs into place
      #  run: |
      #    mv docs ../../..

      #- name: Find html dir
      #  run: |
      #    find ~ -name html

      - name: Check for git
        run: |
          find ~ -name .git

      - name: Move dir into place for the pages deploy
        run: |
          pwd
          echo "moving everything..."
          mv * ../..
          cd ../..
          ls -laF

      - name: Deploy to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@4.1.5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: gh-pages
          folder: docs/html
          clean: true
          #GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          #BRANCH: gh-pages # The branch the action should deploy to.
          #FOLDER: docs/html # The folder the action should deploy.
          #CLEAN: true # Automatically remove deleted files from the deploy branch
